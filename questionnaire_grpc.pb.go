// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionnaireClient is the client API for Questionnaire service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionnaireClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	GetSurvey(ctx context.Context, in *SurveyRequest, opts ...grpc.CallOption) (*SurveyResponse, error)
}

type questionnaireClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionnaireClient(cc grpc.ClientConnInterface) QuestionnaireClient {
	return &questionnaireClient{cc}
}

func (c *questionnaireClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/api.Questionnaire/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnaireClient) GetSurvey(ctx context.Context, in *SurveyRequest, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/api.Questionnaire/GetSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionnaireServer is the server API for Questionnaire service.
// All implementations must embed UnimplementedQuestionnaireServer
// for forward compatibility
type QuestionnaireServer interface {
	Test(context.Context, *TestRequest) (*TestResponse, error)
	GetSurvey(context.Context, *SurveyRequest) (*SurveyResponse, error)
	mustEmbedUnimplementedQuestionnaireServer()
}

// UnimplementedQuestionnaireServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionnaireServer struct {
}

func (UnimplementedQuestionnaireServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedQuestionnaireServer) GetSurvey(context.Context, *SurveyRequest) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurvey not implemented")
}
func (UnimplementedQuestionnaireServer) mustEmbedUnimplementedQuestionnaireServer() {}

// UnsafeQuestionnaireServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionnaireServer will
// result in compilation errors.
type UnsafeQuestionnaireServer interface {
	mustEmbedUnimplementedQuestionnaireServer()
}

func RegisterQuestionnaireServer(s grpc.ServiceRegistrar, srv QuestionnaireServer) {
	s.RegisterService(&Questionnaire_ServiceDesc, srv)
}

func _Questionnaire_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnaireServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Questionnaire/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questionnaire_GetSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnaireServer).GetSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Questionnaire/GetSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireServer).GetSurvey(ctx, req.(*SurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Questionnaire_ServiceDesc is the grpc.ServiceDesc for Questionnaire service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Questionnaire_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Questionnaire",
	HandlerType: (*QuestionnaireServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Questionnaire_Test_Handler,
		},
		{
			MethodName: "GetSurvey",
			Handler:    _Questionnaire_GetSurvey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "questionnaire.proto",
}
